name: Build and Test

on: [push, pull_request]

jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE_NAME }}_test
          POSTGRES_USER: ${{ secrets.DATABASE_USERNAME }}
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        # Keep container alive after initialization
        with:
          # This prevents the immediate shutdown
          post-healthcheck: sleep 1h
    
    env:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}_test
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest
          
      - name: Wait for PostgreSQL to be ready
        timeout-minutes: 2
        run: |
          for i in {1..10}; do
            if pg_isready -h postgres -p 5432 -U ${{ secrets.DATABASE_USERNAME }}; then
              break
            fi
            sleep 5
          done
          pg_isready -h postgres -p 5432 -U ${{ secrets.DATABASE_USERNAME }}

      - name: Run tests
        run: pytest -v --cov=.